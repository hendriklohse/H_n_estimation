from scipy import stats
import matplotlib.pyplot as plt
# from get_input import get_input, create_girg_
# locClusLocal = {180: 0.086731843575419, 23497: 0.0007009566300663945, 13574: 0.0013941171115038912, 112: 0.12942406692406694, 144: 0.10831733625851271, 102: 0.14431394119804133, 160: 0.0944018605870021, 151: 0.10185170757044539, 106: 0.13507675249947432, 141: 0.10392181695373186, 132: 0.1100426291265986, 194: 0.08573705108345353, 96: 0.14888951101157152, 163: 0.09771516574515894, 137: 0.10896167416506433, 140: 0.10607513988808952, 130: 0.11315535984587863, 184: 0.08597977878091918, 169: 0.0967408659716352, 193: 0.08541862929816296, 154: 0.09669807316866143, 142: 0.10462776659959758, 131: 0.12417615971814444, 226: 0.06816617502458211, 149: 0.10388280107980069, 157: 0.09113179813816757, 231: 0.07318652362130622, 152: 0.0979580573951435, 128: 0.11211245078740156, 110: 0.13160967472894078, 129: 0.11677191927292169, 161: 0.09752370055573718, 164: 0.09700733203651055, 136: 0.11337974803447948, 116: 0.12549110060354435, 148: 0.10273211987497702, 175: 0.09724137931034484, 171: 0.09158353399839465, 145: 0.10871647509578546, 224: 0.0799167200512492, 121: 0.1301939853076217, 189: 0.08937483582873652, 218: 0.07630110345410732, 204: 0.07925239061141699, 111: 0.13000129315918793, 174: 0.09219763913804177, 202: 0.07438436151307438, 134: 0.10757303707028765, 113: 0.12998916380711575, 107: 0.1337747070422084, 127: 0.11258461113413454, 166: 0.08580816773587858, 167: 0.09498902367382277, 156: 0.09473590925203827, 117: 0.12789007794953094, 122: 0.1218524396616796, 165: 0.09629526977087953, 126: 0.12781714285714288, 115: 0.13126081375230228, 153: 0.09565512364789969, 147: 0.10961699748392506, 119: 0.11984735448825938, 138: 0.11957723858707672, 162: 0.09292487794903254, 211: 0.08171647806041847, 187: 0.08308895405669599, 191: 0.08362433928705629, 201: 0.07352611940298506, 139: 0.10182462725471797, 203: 0.07199556162512803, 181: 0.08211172498465316, 124: 0.11824485891917741, 199: 0.0813562763311507, 182: 0.0929876753081173, 209: 0.07331155686418844, 216: 0.07896748492678725, 186: 0.0786843769765971, 173: 0.08756863515567642, 238: 0.06800694961528915, 178: 0.08933748069150849, 146: 0.11103392703326018, 207: 0.07508358626974077, 143: 0.10565490847180989, 172: 0.09854481164150686, 150: 0.10396797362533852, 198: 0.07327718812490387, 125: 0.12350967741935484, 155: 0.10070288134804266, 135: 0.1081186659296112, 225: 0.06301587301587301, 185: 0.09462397179788484, 222: 0.08027258027258027, 158: 0.09576600131304638, 168: 0.10031884283381289, 118: 0.11824569027958856, 120: 0.12327476445123503, 212: 0.07767529796502344, 219: 0.07158895731221984, 93: 0.14247311827956988, 133: 0.10281765018607124, 104: 0.13546471613290575, 108: 0.13874343621808327, 188: 0.08292833574435576, 99: 0.13831303272297063, 183: 0.09182729838467543, 123: 0.12258285091760399, 114: 0.12671324328520414, 159: 0.09388469980779512, 97: 0.14242115619110968, 170: 0.08936071470008124, 94: 0.14130885768683427, 177: 0.09054857571806724, 101: 0.13516120842853518, 210: 0.07157563329812135, 214: 0.08136043676388549, 109: 0.1330409356725146, 105: 0.13978937728937732, 192: 0.07311663757998836, 103: 0.13835996155506958, 195: 0.08462199312714777, 89: 0.15203533461960428, 176: 0.08419080919080918, 215: 0.0673911468521336, 205: 0.06800573888091822, 95: 0.14973404255319148, 196: 0.08011512297226582, 206: 0.0790012366143079, 220: 0.07614777916147779, 234: 0.06649915019013732, 179: 0.0912865303047966, 190: 0.08920077972709553, 208: 0.07951272761055371, 213: 0.08061387191070954, 200: 0.0892964824120603, 197: 0.0897821057356953, 100: 0.14493783993783993, 88: 0.15535353535353535, 233: 0.06523481821321099, 221: 0.07079765154631465, 217: 0.0667396787468472, 246: 0.0678281068524971, 98: 0.14635493372606773, 229: 0.07628240907946723, 245: 0.06678933868629419, 223: 0.053165272896214595, 377: 0.043844178565381794, 7979: 0.0021960064321513814, 8830: 0.0022466372849588257, 7312: 0.0026413617321340973, 237: 0.07592791246513624, 235: 0.06338122082802934, 251: 0.06679681274900398, 254: 0.06532009585758303, 406: 0.04892051328832938, 256: 0.06391952614379086, 324: 0.05323357413140695, 262: 0.07694422508847357, 356: 0.048219655008703906, 278: 0.058540892917435, 385: 0.04986201298701299, 268: 0.06149030130247638, 252: 0.07022702839435907, 253: 0.06736098040445866, 250: 0.0651004016064257, 411: 0.039516942614681624, 340: 0.043385967956504144, 320: 0.04942006269592476, 292: 0.06065527467871769, 304: 0.05087285044293903, 442: 0.038410235889227484, 266: 0.0620442615973897, 325: 0.04912155745489079, 400: 0.03800751879699248, 255: 0.06348618187432453, 443: 0.039779169177655435, 260: 0.06476982476982478, 263: 0.06454445186195687, 274: 0.05908041674465032, 354: 0.047910564811702756, 393: 0.03873915978605183, 374: 0.048863098736935666, 297: 0.05791397458064124, 271: 0.05026650266502665, 241: 0.06977869986168742, 383: 0.05112572280015857, 294: 0.06091492342101801, 369: 0.053154825026511136, 323: 0.04837220929561756, 412: 0.034529799447239745, 313: 0.05402637830752847, 287: 0.06282741648595308, 413: 0.04366581254848492, 321: 0.05786214953271028, 299: 0.05607954928059976, 332: 0.04242953687863236, 430: 0.04134005529354366, 449: 0.03675827235125676, 426: 0.041391880695940346, 258: 0.06831357644858686, 275: 0.053871267418712676, 269: 0.06020085446374077, 265: 0.0631789594053745, 303: 0.05087462388622968, 228: 0.062082519073012925, 371: 0.036293436293436294, 334: 0.04217391043738349, 433: 0.030707381746642715, 270: 0.061049153242461796, 248: 0.06470114492185801, 360: 0.04133395233673785, 352: 0.04733229733229733, 242: 0.07273413120263364, 227: 0.06030953958909985, 300: 0.04074321813452248, 418: 0.03719894897479146, 301: 0.05830564784053156, 346: 0.051816480969534506, 312: 0.053446285761398295, 375: 0.037105169340463456, 286: 0.04865660655134339, 272: 0.05867769155632733, 230: 0.07283927177604793, 399: 0.031838389944711026, 273: 0.06632909574086045, 458: 0.041083389869377845, 366: 0.04777303690395988, 277: 0.054868414168367075, 423: 0.03951687898445991, 329: 0.05467417896063459, 345: 0.044152342433434445, 361: 0.04989612188365651, 232: 0.06418868487834005, 335: 0.060711412994905706, 261: 0.07376215738284704, 257: 0.06525413424124514, 436: 0.04306390382790257, 7559: 0.002442845224867892, 343: 0.04404293045539018, 244: 0.06746272684341902, 368: 0.04463333728231252, 309: 0.05741184381961081, 291: 0.06204526602678042, 276: 0.0627931488801054, 247: 0.06797481508649673, 397: 0.03958985319186831, 386: 0.050575331404346946, 283: 0.06215071548505125, 302: 0.06088424897141977, 407: 0.04176299003885211, 240: 0.07083333333333335, 264: 0.06715203364442908, 311: 0.052892161947239225, 279: 0.062401691549985816, 328: 0.05955843962109346, 396: 0.03909985935302391, 342: 0.04429695940731594, 388: 0.03990516529476012, 7033: 0.0028926689989189594, 408: 0.045442501324854265, 365: 0.04962366400722565, 446: 0.03851967551771049, 420: 0.04426071144448233, 347: 0.04352751078609385, 387: 0.048667175429435945, 259: 0.06402083146269193, 414: 0.04144685795385869, 280: 0.06565113500597371, 295: 0.05715823052384796, 390: 0.04280535231692044, 363: 0.06136706086480069, 379: 0.04686053058964229, 435: 0.04598760527570316, 409: 0.044854738961599305, 239: 0.07058471924334588, 344: 0.06110583768391077, 293: 0.058371125344803404, 267: 0.0635014502548506, 422: 0.04139883599193975, 316: 0.0566003616636528, 298: 0.06092242333853072, 327: 0.05639669049361175, 333: 0.05687615326169543, 310: 0.058990152068761535, 284: 0.05387448365102274, 282: 0.06587415764367381, 339: 0.05493009373199979, 382: 0.05066578719544874, 322: 0.06015750469224667, 288: 0.04065040650406504, 372: 0.04344549749297163, 315: 0.054938833282782325, 281: 0.05378749364514489, 351: 0.05847781847781848, 380: 0.045771420636022776, 236: 0.06747205192931843, 285: 0.06492216456634545, 326: 0.05882963662104766, 317: 0.05494549375074871, 416: 0.05103104726598703, 419: 0.04961402747484898, 456: 0.041676306149990364, 364: 0.053552508097962644, 392: 0.051718513492353464, 296: 0.0630554283096656, 249: 0.07429179081919075, 305: 0.059059534081104405, 389: 0.049412980680041345, 243: 0.07183620718974255, 338: 0.0521307042649202, 349: 0.06382768501136252, 402: 0.05207131425168422, 337: 0.06605906457538505, 381: 0.06065064235391628, 336: 0.05627813314380478, 353: 0.0454143059490085, 290: 0.07221095334685598, 394: 0.05304762273801682, 289: 0.0855920799692426, 350: 0.052148997134670486, 448: 0.046021093000958774, 391: 0.03933372680175749, 403: 0.04475142895942126, 451: 0.0340970682434097, 314: 0.0494291935451049, 306: 0.06824172291867567, 331: 0.056413073331502334, 395: 0.041611514489494315, 373: 0.05142840669953011, 358: 0.047478209160759274, 404: 0.04218362282878412, 307: 0.05956867003044432, 330: 0.05222437137330754, 646: 0.03081575347397221, 5748: 0.0031427852164313376, 5352: 0.003973385246572522, 3704: 0.005478308697226987, 5314: 0.0037008804006562184, 4613: 0.0043106616938554995, 3644: 0.005215029771545086, 480: 0.03865257480862909, 624: 0.033171104800318284, 535: 0.035724036543106165, 447: 0.03623057553595971, 543: 0.026244792834668677, 444: 0.03755617920403473, 452: 0.03390695210250574, 608: 0.02625617792421746, 712: 0.02515842538598903, 495: 0.03964339753813438, 698: 0.02704385968518374, 558: 0.028995579235922088, 610: 0.026530996796683626, 861: 0.020017286551603057, 5274: 0.0035763649090345914, 644: 0.022391159452488818, 585: 0.02968621941224681, 520: 0.032836816362827925, 823: 0.018953268707151156, 563: 0.028728911588275823, 482: 0.0390006987517361, 438: 0.04348348536618497, 513: 0.03527046783625731, 685: 0.025316941990011527, 616: 0.027600042234188576, 468: 0.04247881549808745, 527: 0.036219074898449506, 504: 0.02853513837609265, 815: 0.017301517915014848, 4191: 0.00458887637960421, 596: 0.02588122497321076, 457: 0.03445429766977619, 595: 0.023178564355034945, 791: 0.016908575909360048, 748: 0.017034268983241344, 450: 0.030017322444939373, 594: 0.024891977674439732, 784: 0.021439322855579014, 586: 0.034281380356465684, 675: 0.029027365644576326, 656: 0.024243623161422454, 549: 0.02418464893037108, 469: 0.0303610154356423, 753: 0.021555621485688452, 424: 0.029294348543646015, 881: 0.02155866267671035, 843: 0.021142396654860625, 709: 0.02575442454957647, 651: 0.029634881247784475, 528: 0.039496003680064395, 544: 0.03947974217311234, 797: 0.026881584837613413, 500: 0.040048096192384766, 505: 0.032798994185132796, 837: 0.021819782430987863, 605: 0.03010782113732144, 497: 0.037174660868436425, 516: 0.04005418830435764, 632: 0.027593331862223916, 441: 0.0378272521129664, 574: 0.02898735793640659, 682: 0.02963986891797038, 533: 0.03627502151250547, 427: 0.043155105496366176, 517: 0.039351955977388935, 587: 0.031088836043746477, 820: 0.023964382500967867, 3822: 0.005401037068139921, 702: 0.027986067929006587, 741: 0.026231899916110444, 432: 0.04752083870413337, 559: 0.03939446400061554, 652: 0.032686852694768787, 471: 0.04180933881435304, 755: 0.02507070458657579, 614: 0.03321093994930682, 717: 0.026047388638258416, 521: 0.0320832718145578, 613: 0.027996353516936953, 626: 0.02890223642172524, 649: 0.031201848998459167, 576: 0.03160628019323672, 562: 0.03376976801720365, 622: 0.03253491153672895, 511: 0.035309466252254326, 708: 0.02570741335634774, 573: 0.029863679078338763, 629: 0.03282685082984821, 878: 0.024441367989340344, 825: 0.026422477199176227, 486: 0.04356200415765135, 742: 0.024607964031995812, 863: 0.023641427814804557, 847: 0.0200401360942947, 472: 0.034851919824390946, 473: 0.0342655964453363, 695: 0.026239296747040407, 833: 0.02353345184227537, 868: 0.021741903592556566, 496: 0.040273704789833824, 814: 0.023887020196983296, 460: 0.04206213886520792, 487: 0.038473563684606346, 532: 0.03510187899126347, 674: 0.028293526042654133, 597: 0.03332096725236923, 759: 0.026030640232773995, 762: 0.0242359652481022, 612: 0.035305884492367594, 751: 0.02944340878828229, 718: 0.0286923617828852, 599: 0.03413157938816645, 634: 0.031152042499539023, 465: 0.036151279199110126, 515: 0.036024328510445396, 493: 0.038770428272234043, 607: 0.029980263265206256, 567: 0.029901346744691856, 623: 0.0343839837318648, 529: 0.04204975081629146, 547: 0.034346518807213504, 483: 0.04464232021511473, 488: 0.04355875719527384, 539: 0.041292218137677514, 701: 0.029908294273486857, 569: 0.03496373672615659, 580: 0.030712881901018403, 619: 0.03432825676657726, 466: 0.04014029258387558, 795: 0.02115235334188806, 639: 0.02884110654873161, 598: 0.030419656812490547, 766: 0.02757726241062134, 617: 0.03587741270075143, 835: 0.025770042648515918, 706: 0.03221023446446869, 459: 0.044800258774057904, 476: 0.046528084918177795, 601: 0.035851358846367164, 775: 0.028777194298574643, 828: 0.023761748710489576, 778: 0.026163512024694545, 526: 0.03351077313054499, 481: 0.035602910602910605, 750: 0.022529595015576324, 787: 0.02214742750354844, 600: 0.028202559821925433, 872: 0.019806138678519894, 664: 0.023937378473168694, 838: 0.02047031248663399, 571: 0.023928472670292193, 1057: 0.01800765459705857, 2695: 0.006402463799854828, 1759: 0.009619308726581514, 2487: 0.007218550137302873, 1952: 0.008993916528724236, 3190: 0.006216510320055913, 2934: 0.007468314743890538, 1776: 0.012556147696992767, 2963: 0.006594498932706623, 1408: 0.011816929960586676, 1835: 0.010043412501968569, 2334: 0.007973228639713862, 2543: 0.007334430022341146, 2517: 0.008409587460278058, 1967: 0.010536000674403342, 1625: 0.010631299734748011, 1795: 0.0107669327967257, 2659: 0.007300333832228153, 1955: 0.011009222344093171, 2007: 0.011070922757388026, 876: 0.01977560339204175, 849: 0.019095717492277262, 1097: 0.014891309410535701, 1047: 0.01711892852381657, 979: 0.018494728772525698, 968: 0.019068659709817932, 977: 0.01830419316408544, 850: 0.01691678791658006, 1522: 0.010956551338639684, 2045: 0.00907946927975732, 1111: 0.013298627160013298, 1359: 0.011701838287487226, 1049: 0.015378150037476623, 1669: 0.01046448640967394, 2182: 0.00877505966662338, 873: 0.019525626070599114, 1102: 0.016439435523884407, 1005: 0.020227547521357355, 1562: 0.011505642087338544, 976: 0.017683900798654898, 1168: 0.016493819769693982, 1470: 0.012578319278698546, 1100: 0.017343039126478617, 903: 0.02135036451542407, 1174: 0.01611064394649053, 1015: 0.016027827168410724, 1137: 0.015279893963605733, 1662: 0.010987538135074415, 1711: 0.012881902789313044, 1079: 0.017889167630992072, 990: 0.016992983423721544, 1677: 0.012856803332465208, 1260: 0.017319111917999924, 1389: 0.01530759383629713, 1233: 0.015983610874121822, 1198: 0.016231452309125625, 949: 0.019589796943707122, 985: 0.020236473938343442, 935: 0.021202578753907637, 912: 0.019493712326920484, 1238: 0.016741478092680843, 1247: 0.015478561066624104, 957: 0.018358451052146046, 1258: 0.01571232892305474, 1242: 0.016315863914224283, 1455: 0.013321232575617918, 1434: 0.015080864383173668, 1683: 0.012603477596133398, 1596: 0.01363832779440765, 1019: 0.02042142321433047, 947: 0.020235259448441834, 1068: 0.02119597457255282, 961: 0.023074921956295527, 1465: 0.014458494190492176, 939: 0.02227565958432393, 1512: 0.014182590456581191, 1060: 0.020535571115505906, 943: 0.02225359279347432, 1106: 0.018665772053709506, 891: 0.02028777159863302, 946: 0.01828472991263689, 1480: 0.01330976006432396, 1516: 0.013686355442932155, 889: 0.025762826943929305, 911: 0.023746396304025284, 941: 0.02335225088746693, 1399: 0.015645755551942375, 922: 0.0254768819141695, 1149: 0.02058599660968635, 1707: 0.011489137548924468, 1051: 0.01721353812695392, 1251: 0.014168505195843326, 893: 0.021188717428529822, 1364: 0.012186332116277919, 1318: 0.012507158057985742, 1317: 0.013467792002178664, 85: 0.16062024809923958, 86: 0.16285909712722296, 81: 0.17661691542288555, 77: 0.1688192468486226, 91: 0.15521872763252073, 92: 0.15136535705097576, 80: 0.16779385171790226, 87: 0.15666806685250947, 82: 0.16442299924354256, 84: 0.16988668961560535, 75: 0.17854033809089986, 73: 0.1835158527461755, 83: 0.1646096581447741, 78: 0.1709702062643239, 66: 0.20150977227900305, 74: 0.18473571042064194, 76: 0.17750920511154433, 79: 0.1698120776488007, 67: 0.1969829994412962, 68: 0.19284394533041543, 55: 0.22946881752851914, 71: 0.1855382293762575, 60: 0.21725262308313145, 61: 0.213379049251759, 64: 0.19830429412383052, 69: 0.19514841509726422, 70: 0.18932319554508453, 90: 0.15662868223231596, 65: 0.20654362416107383, 72: 0.1942801251956182, 62: 0.19975200131293422, 59: 0.2219243972403044, 58: 0.22000814844994282, 47: 0.2690150162424972, 56: 0.22427473024487934, 54: 0.2239497422908974, 45: 0.27225799067158857, 63: 0.20478320831511326, 57: 0.22054495212389957, 51: 0.24344020870150646, 53: 0.23732656023222046, 42: 0.27868336898612167, 39: 0.29752388861700596, 43: 0.28110329129601597, 52: 0.24207834447485874, 50: 0.24988595438175287, 48: 0.25784125594757146, 46: 0.2640401207021126, 49: 0.2549528583363169, 40: 0.2952198517628204, 34: 0.3378915537066582, 44: 0.27082796197940817, 35: 0.32371346233017745, 38: 0.31234900829820494, 29: 0.380101731076112, 31: 0.3573395506373897, 36: 0.31329396227355377, 41: 0.2911252771618626, 32: 0.3477683537263628, 21: 0.4775943481893135, 37: 0.31531531531531537, 30: 0.3678204790734397, 25: 0.4199222022740876, 26: 0.4119783895034733, 27: 0.39580059535216405, 28: 0.3817662073874585, 19: 0.5136900757301316, 22: 0.459447277234696, 33: 0.3414722190135156, 20: 0.4913618443151879, 24: 0.4331502499169648, 23: 0.44441687296044746, 17: 0.5482550211171562, 18: 0.5297544603426962, 14: 0.6282558041229903, 15: 0.6000471087033362, 16: 0.5718519232004092, 11: 0.7202520122338857, 12: 0.6872288473396755, 13: 0.6545874856402338, 9: 0.7932788815937235, 10: 0.7557761755099592, 7: 0.8621686614508647, 8: 0.8308453195550348, 6: 0.8907498238758217, 4: 0.9294637589378683, 3: 0.9410681399631284, 5: 0.9124423808083758, 2: 0.9495247198767989, 1: 0.0}
# from create_girg import generate_graph, localClusteringCoefficient
import numpy as np

# clus_dict = locClusLocal
# dict_length = len(clus_dict.keys())

# class MyRandomVariableClass(stats.rv_discrete):
# 	def __init__(self, xtol=1e-14, seed=None):
# 		super().__init__(a=0, moment_tol=1e-08, seed=seed)
#
# 	def _cdf(self, k, *args, **kwargs):
# 		return cdf_list2[k]

def H_n(clusDict, k: int, limit):
	"""create the pmf tuple"""
	c_n_sum = 0
	for i in range(2, limit+1):
		if clusDict.get(i):
			c_n_sum += i ** (-2) * clusDict[i]
	#print("c_n_sum is: " + str(c_n_sum))

	if k > 0 and c_n_sum > 0 and clusDict.get(k) and clusDict.get(k) > 0:
		return k, (1 / c_n_sum) * k ** (-2) * clusDict[k]
	else:
		return k, 0.0

def create_CDF(clus_dict, dict_length, n, ple):
	k_c = int(n**(1/(ple)))
	# k_c = 200
	H_tuple_k = []
	H_tuple_prb_nn = []
	for j in range(dict_length):
		H_tuple_k.append(H_n(clus_dict, j, dict_length)[0])
		H_tuple_prb_nn.append(H_n(clus_dict, j, dict_length)[1])
	# for i in range(2, len(H_tuple_prb_nn)):
	# 	if H_tuple_prb_nn[i] == 0.0:
	# 		k_c_zero = i
	# 		break
	# print(k_c_zero)
	# k_c = int(k_c_zero * 1.5)
	# rest = dict_length - k_c
	# print(rest)
	# del H_tuple_k[-rest:]
	# del H_tuple_prb_nn[-rest:]
	H_tuple_prb_nn[0] = 0.0
	H_tuple_prb_nn[1] = 0.0
	s = sum(H_tuple_prb_nn)
	H_tuple_prb = [prb / s for prb in H_tuple_prb_nn]
	# print(H_tuple_prb)
	# plt.plot(H_tuple_k, H_tuple_prb, 'o', color='black')
	# plt.title('pmf prb')
	# plt.yscale('log')
	# plt.xscale('log')
	# plt.savefig('./Figures/pmf_prb')
	# plt.show()

	cusum = np.cumsum(H_tuple_prb_nn)
	cdf_prb = cusum / cusum[-1]
	# print(len(cdf_prb))
	# print(cdf_prb)
	ccdf_prb = [1-elt for elt in cdf_prb]
	rest = dict_length - k_c
	#print(rest)
	del ccdf_prb[-rest:]
	cdf_prb = [1-elt for elt in ccdf_prb]
	cdf_prb.append(1.0)
	# print(cdf_prb)
	kList = [i for i in range(len(ccdf_prb))]
	plt.plot(kList, ccdf_prb, 'o', color='black')
	plt.title('ccdf prb')
	plt.yscale('log')
	plt.xscale('log')
	plt.savefig('./Figures/ccdf_prb')
	plt.show()
	return cdf_prb
	# custm = stats.rv_discrete(name='custm', values=(H_tuple_k, H_tuple_prb))
	# cdf_list = [custm.cdf(k) for k in range(dict_length)]
	# # cdf_list[0] = 0.0
	# # cdf_list[1] = 0.0
	# # print(len(cdf_list))
	# # print(cdf_list)
	# ccdf_list = [1-elt for elt in cdf_list]
	# # print(ccdf_list)
	# rest = dict_length - k_c
	# del ccdf_list[-rest:]
	# # print(ccdf_list)
	# k_list = [i for i in range(len(ccdf_list))]
	# # plt.plot(k_list, ccdf_list, 'o', color='black')
	# # plt.title('ccdf prb after cutoff')
	# # plt.yscale('log')
	# # plt.xscale('log')
	# # plt.savefig('./Figures/ccdf_prb_cutoff')
	# # plt.show()
	# cdf_list2 = [1 - elt for elt in ccdf_list]
	# cdf_list2.append(1.0)
	# # cdf_list2.insert(0,0.0)
	# # cdf_list2[0] = 0.0
	# # cdf_list2[1] = 0.0
	# return cdf_list2

	# #print(len(cdf_list2))
	# # print(cdf_list2)
	# pmf_list2_nn = np.ediff1d(cdf_list2, to_begin=cdf_list2[0])
	# pmf_list2_nn[0] = 0.0
	# pmf_list2_nn[1] = 0.0
	# #print(len(pmf_list2_nn))
	# #print(sum(pmf_list2_nn))
	# #print(pmf_list2_nn)
	# norm = 1-sum(pmf_list2_nn)
	# pmf_list2 = [prb + norm / len(pmf_list2_nn) for prb in pmf_list2_nn]
	# # print(pmf_list2)
	# k_list2 = [i for i in range(len(pmf_list2))]
	# custm2 = stats.rv_discrete(name='custm2', values=(k_list2, pmf_list2))
	# return custm2


# dic_real = {}
# with open("./Examples/realClusteringFunction_alpha0.8_nu1.dat", 'r') as f:
# 	lines = f.readlines()
# 	for line in lines:
# 		fields = line.split("\t")
# 		dic_real[int(fields[0])] = float(fields[1].strip())
# print(dic_real)
#
# H_n_real = create_PMF(clus_dict=dic_real, dict_length=len(dic_real.keys()), ple=2.6, n=10000)

# #
# n = 500000
# ple=2.5
# k_c = int(n**(1/(ple)))
# create_girg_(n=str(n), d=1, ple=2.5, alpha="inf", deg=10, wseed=12, pseed=130, sseed=1400, threads=1, file="graph_" + str(n), dot=0, edge=1)
# get_input("graph_" + str(n) + ".txt")
#
#
# girg = generate_graph(firstTime=True, edgeFile="./input/graph_" + str(n) + ".txt")
# locClus = localClusteringCoefficient(girg)
# # # # #
# clusList = []
# for i in range(2, len(locClus.keys())+1):
# 	if locClus.get(i):
# 		clusList.append(locClus[i])
#
# # print(locClus)
# # print(clusList)
#
# plt.plot(clusList)
# plt.title("clustering function")
# plt.savefig('./Figures/locClus')
# plt.show()
#
# plt.plot(clusList)
# plt.yscale('log')
# plt.xscale('log')
# plt.title("clustering function loglog")
# plt.savefig('./Figures/locClus_loglog')
# plt.show()
#
# H_n = create_CDF(clus_dict=locClus, dict_length=len(locClus.keys()), n=n, ple=2.5)
#
# cdf_list = [H_n.cdf(k) for k in range(k_c)]
# ccdf_list = [1-elt for elt in cdf_list]
# # rest = len(locClus.keys()) - int(n**(1/(2.5+1)))
# # del ccdf_list[-rest:]
# # cdf_list2 = [1 - elt for elt in ccdf_list]
# pmf_list = [H_n.pmf(k) for k in range(k_c)]

# print(ccdf_list)
# print(cdf_list)
# print(pmf_list)
# #
# plt.plot(pmf_list)
# plt.title("PMF2 of H_n")
# plt.savefig('./Figures/pmf_list2')
# plt.show()
# #
# plt.plot(cdf_list)
# plt.title("CDF2 of H_n")
# plt.savefig('./Figures/cdf_list2')
# plt.show()

# plt.plot(pmf_list)
# plt.yscale('log')
# plt.xscale('log')
# plt.title("loglog PMF2 of H_n")
# plt.savefig('./Figures/pmf_list2_loglog')
# plt.show()
# #
# x_list = [x for x in range(len(ccdf_list))]
# plt.plot(x_list, ccdf_list, 'o', color='black')
# plt.yscale('log')
# plt.xscale('log')
# plt.title("loglog CCDF2 of H_n")
# plt.savefig('./Figures/ccdf_list2_loglog')
# plt.show()


#plot PMF, plot sampled H

# R = custm.rvs(size=100000)
# print(R)
